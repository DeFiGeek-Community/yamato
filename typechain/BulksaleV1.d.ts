/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface BulksaleV1Interface extends ethers.utils.Interface {
  functions: {
    "claim(address,address)": FunctionFragment;
    "closingAt()": FunctionFragment;
    "erc20onsale()": FunctionFragment;
    "expirationDuration()": FunctionFragment;
    "factory()": FunctionFragment;
    "feeRatePerMil()": FunctionFragment;
    "initialize(bytes)": FunctionFragment;
    "lockDuration()": FunctionFragment;
    "minimalProvideAmount()": FunctionFragment;
    "owner()": FunctionFragment;
    "provided(address)": FunctionFragment;
    "startingAt()": FunctionFragment;
    "totalDistributeAmount()": FunctionFragment;
    "totalProvided()": FunctionFragment;
    "withdrawERC20Onsale()": FunctionFragment;
    "withdrawProvidedETH()": FunctionFragment;
    "withdrawUnclaimedERC20OnSale()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claim",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "closingAt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "erc20onsale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "expirationDuration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeRatePerMil",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimalProvideAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "provided", values: [string]): string;
  encodeFunctionData(
    functionFragment: "startingAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDistributeAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalProvided",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20Onsale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawProvidedETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawUnclaimedERC20OnSale",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "closingAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "erc20onsale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expirationDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeRatePerMil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimalProvideAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "provided", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startingAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalDistributeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalProvided",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20Onsale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawProvidedETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUnclaimedERC20OnSale",
    data: BytesLike
  ): Result;

  events: {
    "Claimed(address,uint256,uint256)": EventFragment;
    "Initialized(bytes)": EventFragment;
    "Received(address,uint256)": EventFragment;
    "WithdrawnAfterLockDuration(address,uint256)": EventFragment;
    "WithdrawnOnFailed(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Received"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnAfterLockDuration"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnOnFailed"): EventFragment;
}

export class BulksaleV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BulksaleV1Interface;

  functions: {
    claim(
      contributor: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closingAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    erc20onsale(overrides?: CallOverrides): Promise<[string]>;

    expirationDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    feeRatePerMil(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      abiBytes: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimalProvideAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    provided(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    startingAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDistributeAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalProvided(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawERC20Onsale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawProvidedETH(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawUnclaimedERC20OnSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  claim(
    contributor: string,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closingAt(overrides?: CallOverrides): Promise<BigNumber>;

  erc20onsale(overrides?: CallOverrides): Promise<string>;

  expirationDuration(overrides?: CallOverrides): Promise<BigNumber>;

  factory(overrides?: CallOverrides): Promise<string>;

  feeRatePerMil(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    abiBytes: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockDuration(overrides?: CallOverrides): Promise<BigNumber>;

  minimalProvideAmount(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  provided(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  startingAt(overrides?: CallOverrides): Promise<BigNumber>;

  totalDistributeAmount(overrides?: CallOverrides): Promise<BigNumber>;

  totalProvided(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawERC20Onsale(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawProvidedETH(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawUnclaimedERC20OnSale(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claim(
      contributor: string,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    closingAt(overrides?: CallOverrides): Promise<BigNumber>;

    erc20onsale(overrides?: CallOverrides): Promise<string>;

    expirationDuration(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<string>;

    feeRatePerMil(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      abiBytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    minimalProvideAmount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    provided(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    startingAt(overrides?: CallOverrides): Promise<BigNumber>;

    totalDistributeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalProvided(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawERC20Onsale(overrides?: CallOverrides): Promise<void>;

    withdrawProvidedETH(overrides?: CallOverrides): Promise<void>;

    withdrawUnclaimedERC20OnSale(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    Claimed(
      account?: string | null,
      userShare?: null,
      erc20allocation?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { account: string; userShare: BigNumber; erc20allocation: BigNumber }
    >;

    Initialized(
      abiBytes?: BytesLike | null
    ): TypedEventFilter<[string], { abiBytes: string }>;

    Received(
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    WithdrawnAfterLockDuration(
      sender?: string | null,
      balance?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; balance: BigNumber }
    >;

    WithdrawnOnFailed(
      sender?: string | null,
      balance?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; balance: BigNumber }
    >;
  };

  estimateGas: {
    claim(
      contributor: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closingAt(overrides?: CallOverrides): Promise<BigNumber>;

    erc20onsale(overrides?: CallOverrides): Promise<BigNumber>;

    expirationDuration(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    feeRatePerMil(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      abiBytes: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    minimalProvideAmount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    provided(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    startingAt(overrides?: CallOverrides): Promise<BigNumber>;

    totalDistributeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalProvided(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawERC20Onsale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawProvidedETH(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawUnclaimedERC20OnSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(
      contributor: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closingAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    erc20onsale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    expirationDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeRatePerMil(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      abiBytes: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimalProvideAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    provided(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startingAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDistributeAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalProvided(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawERC20Onsale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawProvidedETH(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawUnclaimedERC20OnSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
