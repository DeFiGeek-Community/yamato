/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface FactoryInterface extends ethers.utils.Interface {
  functions: {
    "addTemplate(string,address)": FunctionFragment;
    "deploy(string,address,uint256,bytes)": FunctionFragment;
    "deployTokenClone(string,bytes)": FunctionFragment;
    "governance()": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "templates(string)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addTemplate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deploy",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployTokenClone",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "templates", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployTokenClone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "templates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deployed(address,string,address,bytes)": EventFragment;
    "GovernanceChanged(address,address)": EventFragment;
    "Received(address,uint256,uint256)": EventFragment;
    "TemplateAdded(string,address,address)": EventFragment;
    "TokenCloneDeployed(address,string,address,bytes)": EventFragment;
    "Withdrawn(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernanceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Received"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TemplateAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenCloneDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export class Factory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FactoryInterface;

  functions: {
    addTemplate(
      templateName: string,
      templateAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deploy(
      templateName: string,
      tokenAddr: string,
      sellingAmount: BigNumberish,
      abiArgs: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployTokenClone(
      templateName: string,
      abiArgs: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    setGovernance(
      newGoverner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    templates(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addTemplate(
    templateName: string,
    templateAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deploy(
    templateName: string,
    tokenAddr: string,
    sellingAmount: BigNumberish,
    abiArgs: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployTokenClone(
    templateName: string,
    abiArgs: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  governance(overrides?: CallOverrides): Promise<string>;

  setGovernance(
    newGoverner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  templates(arg0: string, overrides?: CallOverrides): Promise<string>;

  withdraw(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addTemplate(
      templateName: string,
      templateAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deploy(
      templateName: string,
      tokenAddr: string,
      sellingAmount: BigNumberish,
      abiArgs: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    deployTokenClone(
      templateName: string,
      abiArgs: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    governance(overrides?: CallOverrides): Promise<string>;

    setGovernance(
      newGoverner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    templates(arg0: string, overrides?: CallOverrides): Promise<string>;

    withdraw(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Deployed(
      sender?: string | null,
      templateName?: string | null,
      deployedAddr?: string | null,
      abiArgs?: null
    ): TypedEventFilter<
      [string, string, string, string],
      {
        sender: string;
        templateName: string;
        deployedAddr: string;
        abiArgs: string;
      }
    >;

    GovernanceChanged(
      oldGoverner?: string | null,
      newGoverner?: string | null
    ): TypedEventFilter<
      [string, string],
      { oldGoverner: string; newGoverner: string }
    >;

    Received(
      sender?: string | null,
      fee?: null,
      treasury?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sender: string; fee: BigNumber; treasury: BigNumber }
    >;

    TemplateAdded(
      templateName?: string | null,
      templateAddr?: string | null,
      governer?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { templateName: string; templateAddr: string; governer: string }
    >;

    TokenCloneDeployed(
      sender?: string | null,
      templateName?: string | null,
      deployedAddr?: string | null,
      abiArgs?: null
    ): TypedEventFilter<
      [string, string, string, string],
      {
        sender: string;
        templateName: string;
        deployedAddr: string;
        abiArgs: string;
      }
    >;

    Withdrawn(
      sender?: string | null,
      governance?: null,
      amount?: null,
      treasuryAfter?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        sender: string;
        governance: string;
        amount: BigNumber;
        treasuryAfter: BigNumber;
      }
    >;
  };

  estimateGas: {
    addTemplate(
      templateName: string,
      templateAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deploy(
      templateName: string,
      tokenAddr: string,
      sellingAmount: BigNumberish,
      abiArgs: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployTokenClone(
      templateName: string,
      abiArgs: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    setGovernance(
      newGoverner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    templates(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addTemplate(
      templateName: string,
      templateAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deploy(
      templateName: string,
      tokenAddr: string,
      sellingAmount: BigNumberish,
      abiArgs: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployTokenClone(
      templateName: string,
      abiArgs: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setGovernance(
      newGoverner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    templates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
