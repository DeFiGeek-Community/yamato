/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface YamatoInterface extends ethers.utils.Interface {
  functions: {
    "DCRR()": FunctionFragment;
    "FR()": FunctionFragment;
    "GRR()": FunctionFragment;
    "MCR()": FunctionFragment;
    "RRR()": FunctionFragment;
    "getICR(uint256,uint256)": FunctionFragment;
    "getTCR(uint256)": FunctionFragment;
    "issue(uint256)": FunctionFragment;
    "issueLocks(address)": FunctionFragment;
    "pledges(address)": FunctionFragment;
    "pledgesIndices(uint256)": FunctionFragment;
    "redeem(uint256,bool)": FunctionFragment;
    "repay(uint256)": FunctionFragment;
    "sweep()": FunctionFragment;
    "totalColl()": FunctionFragment;
    "totalDebt()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawLocks(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "DCRR", values?: undefined): string;
  encodeFunctionData(functionFragment: "FR", values?: undefined): string;
  encodeFunctionData(functionFragment: "GRR", values?: undefined): string;
  encodeFunctionData(functionFragment: "MCR", values?: undefined): string;
  encodeFunctionData(functionFragment: "RRR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getICR",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTCR",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "issue", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "issueLocks", values: [string]): string;
  encodeFunctionData(functionFragment: "pledges", values: [string]): string;
  encodeFunctionData(
    functionFragment: "pledgesIndices",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "repay", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "sweep", values?: undefined): string;
  encodeFunctionData(functionFragment: "totalColl", values?: undefined): string;
  encodeFunctionData(functionFragment: "totalDebt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLocks",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "DCRR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "FR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "GRR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MCR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "RRR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getICR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTCR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "issue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "issueLocks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pledges", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pledgesIndices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sweep", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalColl", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalDebt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLocks",
    data: BytesLike
  ): Result;

  events: {};
}

export class Yamato extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: YamatoInterface;

  functions: {
    DCRR(overrides?: CallOverrides): Promise<[number]>;

    FR(overrides?: CallOverrides): Promise<[number]>;

    GRR(overrides?: CallOverrides): Promise<[number]>;

    MCR(overrides?: CallOverrides): Promise<[number]>;

    RRR(overrides?: CallOverrides): Promise<[number]>;

    getICR(
      collInCjpy: BigNumberish,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { ICR: BigNumber }>;

    getTCR(
      jpyPerEth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { TCR: BigNumber }>;

    issue(
      issueAmountInCjpy: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    issueLocks(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    pledges(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        coll: BigNumber;
        debt: BigNumber;
        isCreated: boolean;
      }
    >;

    pledgesIndices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    redeem(
      maxRedemptionCjpyAmount: BigNumberish,
      isCoreRedemption: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repay(
      cjpyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sweep(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalColl(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      ethAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawLocks(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  DCRR(overrides?: CallOverrides): Promise<number>;

  FR(overrides?: CallOverrides): Promise<number>;

  GRR(overrides?: CallOverrides): Promise<number>;

  MCR(overrides?: CallOverrides): Promise<number>;

  RRR(overrides?: CallOverrides): Promise<number>;

  getICR(
    collInCjpy: BigNumberish,
    debt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTCR(
    jpyPerEth: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  issue(
    issueAmountInCjpy: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  issueLocks(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  pledges(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean] & {
      coll: BigNumber;
      debt: BigNumber;
      isCreated: boolean;
    }
  >;

  pledgesIndices(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  redeem(
    maxRedemptionCjpyAmount: BigNumberish,
    isCoreRedemption: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repay(
    cjpyAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sweep(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalColl(overrides?: CallOverrides): Promise<BigNumber>;

  totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    ethAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawLocks(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    DCRR(overrides?: CallOverrides): Promise<number>;

    FR(overrides?: CallOverrides): Promise<number>;

    GRR(overrides?: CallOverrides): Promise<number>;

    MCR(overrides?: CallOverrides): Promise<number>;

    RRR(overrides?: CallOverrides): Promise<number>;

    getICR(
      collInCjpy: BigNumberish,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTCR(
      jpyPerEth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issue(
      issueAmountInCjpy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    issueLocks(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    pledges(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        coll: BigNumber;
        debt: BigNumber;
        isCreated: boolean;
      }
    >;

    pledgesIndices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    redeem(
      maxRedemptionCjpyAmount: BigNumberish,
      isCoreRedemption: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    repay(cjpyAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    sweep(overrides?: CallOverrides): Promise<void>;

    totalColl(overrides?: CallOverrides): Promise<BigNumber>;

    totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(ethAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawLocks(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    DCRR(overrides?: CallOverrides): Promise<BigNumber>;

    FR(overrides?: CallOverrides): Promise<BigNumber>;

    GRR(overrides?: CallOverrides): Promise<BigNumber>;

    MCR(overrides?: CallOverrides): Promise<BigNumber>;

    RRR(overrides?: CallOverrides): Promise<BigNumber>;

    getICR(
      collInCjpy: BigNumberish,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTCR(
      jpyPerEth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issue(
      issueAmountInCjpy: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    issueLocks(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    pledges(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    pledgesIndices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(
      maxRedemptionCjpyAmount: BigNumberish,
      isCoreRedemption: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repay(
      cjpyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sweep(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalColl(overrides?: CallOverrides): Promise<BigNumber>;

    totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      ethAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawLocks(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DCRR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GRR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MCR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RRR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getICR(
      collInCjpy: BigNumberish,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTCR(
      jpyPerEth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issue(
      issueAmountInCjpy: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    issueLocks(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pledges(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pledgesIndices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeem(
      maxRedemptionCjpyAmount: BigNumberish,
      isCoreRedemption: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repay(
      cjpyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sweep(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalColl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      ethAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLocks(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
