/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { BasicPlugin, BasicPluginInterface } from "../BasicPlugin";

const _abi = [
  {
    inputs: [],
    name: "initialized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "upgrade",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600160008190555060ef806100276000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c8063158ef93e146037578063d55ec697146051575b600080fd5b603d606b565b604051604891906094565b60405180910390f35b6057607e565b604051606291906094565b60405180910390f35b600160009054906101000a900460ff1681565b60006001905090565b608e8160ad565b82525050565b600060208201905060a760008301846087565b92915050565b6000811515905091905056fea2646970667358221220a04f83d9407041e1f729dd3602e892abe0b923449116456b8e4ed176bfaf4e8964736f6c63430008030033";

export class BasicPlugin__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BasicPlugin> {
    return super.deploy(overrides || {}) as Promise<BasicPlugin>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): BasicPlugin {
    return super.attach(address) as BasicPlugin;
  }
  connect(signer: Signer): BasicPlugin__factory {
    return super.connect(signer) as BasicPlugin__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BasicPluginInterface {
    return new utils.Interface(_abi) as BasicPluginInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BasicPlugin {
    return new Contract(address, _abi, signerOrProvider) as BasicPlugin;
  }
}
